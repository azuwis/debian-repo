#!/bin/bash
#
# Script ease building Debian packages

set -e

# Helper functions
err() {
  echo "$@" >&2
}
load_var() {
  local file=~/.pbuilderrc
  if [ -f "$file" ]; then
    eval $(grep "^$1" $file)
  fi
}
# init build host env
init() {
  REPO_BASE="$(dirname $(readlink -f "$0"))"
  cd "${REPO_BASE}"
  mkdir -p pbuilder
  sed -i -e "s#^REPO_BASE=.*#REPO_BASE=\"${REPO_BASE}\"#" pbuilderrc
  # let git ignore REPO_BASE line in pbuilderrc
  git config filter.stripvar.clean "perl -lpe 's/^(REPO_BASE)=(.*)/\$1=\"CHANGEME\"/'"
  mkdir -p ~/bin/
  ln -svi ${REPO_BASE}/dr ~/bin/
  ln -svi ${REPO_BASE}/gbp.conf ~/.gbp.conf
  ln -svi ${REPO_BASE}/pbuilderrc ~/.pbuilderrc
  sudo apt-get install git-buildpackage cowbuilder reprepro bsd-mailx sudo \
    fakeroot tmux
}
usage() {
  cat <<EOF
USAGE: $(basename $0) [-hswjSai] subcommand [options ...]

OPTIONS:
  -h | help
  -l | lenny
  -s | squeeze
  -w | wheezy
  -j | jessie
  -S | sid
  -a | amd64
  -i | i386

SUBCOMMANDS:
  c|create                     | create build chroot env at ${COWBUILDER_BASE}
  u|update                     | update build chroot env
  l|login [--save-after-login] | login into build chroot env
  d|download <pkg>|uri://*.dsc | download and import debian source package
  np|new_patch                 | run after git commit at patch-queue/* branch
  ap|amend_patch               | amend the latest patch in queue
  nc|new_change                | create new changelog stanza
  b|build [<debuild-options>]  | run inside debian source dir
  ba|build_all [<src_dir> ...] | build for every src_dir
  k|kill_pane                  | kill other tmux panes
  s|staging                    | include built deb in main repo(${REPREPRO_STAGING_DIR})
  i|include                    | include built deb in staging repo(${REPREPRO_BASE_DIR})
  t|tag                        | create git tag for current package version
  p|push                       | push to git remote
  f|finish                     | include and push
  cl|clean                     | clean source dir
  cb|clean_built               | remove built files
  w|watch list_file            | watch for upstream version
  r|repo <action> [-s]         | reprepro wrapper, -s for staging repo
  jpkg <jdk.bin>               | use make-jpkg to build jdk.deb inside chroot env
  kpkg [-s] <linux-source.deb> [<version-append>] [<revision-append>]
  list|includedeb|remove|removesrc [-s] <pkg>

default dists: ${DEFAULT_DISTS}
default archs: ${DEFAULT_ARCHS}
EOF
  exit 1
}

# Global settings
# git-pbuilder
load_var REPO_BASE
load_var COWBUILDER_BASE
# reprepro
REPREPRO_BASE_DIR="${REPO_BASE}/repo"
REPREPRO_STAGING_DIR="${REPO_BASE}/repo-staging"
# other
load_var DEFAULT_DISTS
load_var DEFAULT_ARCHS

# Options
DISTS=""
ARCHS=""
OPTIND=1
while getopts "lswjSaih" opt; do
  case "$opt" in
    l) DISTS="$DISTS lenny" ;;
    s) DISTS="$DISTS squeeze" ;;
    w) DISTS="$DISTS wheezy" ;;
    j) DISTS="$DISTS jessie" ;;
    S) DISTS="$DISTS sid" ;;
    a) ARCHS="$ARCHS amd64" ;;
    i) ARCHS="$ARCHS i386" ;;
    h) usage ;;
    *) usage ;;
  esac
done
shift $((OPTIND-1))

# Set default if empty
DISTS=${DISTS:-$DEFAULT_DISTS}
ARCHS=${ARCHS:-$DEFAULT_ARCHS}

# Run command in tmux panes, and pause after finish
tmux_run() {
  if [ x"$TMUX" = x ]; then
    err "Please run inside tmux session."
    exit 1
  fi
  tmux split-window -d \
    "printf '\033]2;$DIST-$ARCH\033\\'; $@;
      echo '#### Press ENTER to exit ####'; read tmp"
  tmux select-layout even-vertical >& /dev/null
}

# Kill other tmux panes
kill_pane() {
  tmux kill-pane -a
}

# Exit if not inside debian source dir
check_dir() {
  if [ ! -f "debian/changelog" ]; then
    err "Please run inside debian source dir."
    exit 1
  fi
}

# Update/create/login
ucl() {
  action="$1"
  shift
  if [ -f "$HOME/.pbuilderrc" ]; then
    GIT_PBUILDER_OPTIONS="--configfile $HOME/.pbuilderrc"
  fi
  for DIST in ${DISTS}; do
    for ARCH in ${ARCHS}; do
      # cowbuilder will not install extrapackages when creating .cow,
      # run `update' after `create' to get extrapackages installed
      if [ x"$action" == x"create" ]; then
        # export empty dist, or create will fail
        if [ ! -d ${REPREPRO_BASE_DIR}/dists/${DIST} ]; then
          reprepro -b "$REPREPRO_BASE_DIR" export $DIST
        fi
        tmux_run "DIST=${DIST} ARCH=${ARCH} COWBUILDER_BASE=${COWBUILDER_BASE} \
          GIT_PBUILDER_OPTIONS='${GIT_PBUILDER_OPTIONS}' \
          git-pbuilder create $*; \
          DIST=${DIST} ARCH=${ARCH} COWBUILDER_BASE=${COWBUILDER_BASE} \
          GIT_PBUILDER_OPTIONS='${GIT_PBUILDER_OPTIONS}' \
          git-pbuilder update"
      else
        tmux_run "DIST=${DIST} ARCH=${ARCH} COWBUILDER_BASE=${COWBUILDER_BASE} \
          GIT_PBUILDER_OPTIONS='${GIT_PBUILDER_OPTIONS}' \
          git-pbuilder ${action} $*"
      fi
    done
  done
}

download() {
  git-import-dsc --download "$@"
}

refresh_patch() {
  gbp-pq drop
  gbp-pq import
}

# New patch
new_patch() {
  if git rev-parse --abbrev-ref HEAD | grep -q '^patch-queue/'; then
    gbp-pq export
    git checkout -- debian/patches/ || echo -n > debian/patches/series
    num_patches=$(cat debian/patches/series | wc -l)
    pushd debian/patches >& /dev/null
    for i in *.patch; do
      if [[ ${i:0:4} =~ ^[0-9]+$ ]] && [ ${i:0:4} -gt $num_patches ]; then
        git add $i
        echo $i >> series
        git add series
        tmp=${i:5}
        msg=${tmp/%.patch/}
        git commit -m "debian/patches/: $msg"
      fi
    done
    popd >& /dev/null
    git clean --force
    refresh_patch
    gbp-pq switch
  else
    refresh_patch
  fi
}

# Amend patch
amend_patch() {
  if git rev-parse --abbrev-ref HEAD | grep -q '^patch-queue/'; then
    git commit --verbose --amend --no-edit
    gbp-pq export
    patch=$(cat debian/patches/series | wc -l)
    git add debian/patches/$(printf '%04d' "$patch")-*
    git checkout -- debian/patches/
    git clean --force
    git commit --verbose --amend --no-edit
    refresh_patch
    gbp-pq switch
  else
    refresh_patch
  fi
}

# New changelog
new_change() {
  check_dir
  branch=$(git rev-parse --abbrev-ref HEAD)
  # set default string appended to $version
  if [ x"$branch" = x"master" ]; then
    append="build"
  else
    append="$branch"
  fi
  version=$(dpkg-parsechangelog | awk '/^Version: / {print $2}')
  if echo ${version} | grep -q "${append}[0-9]*$"; then
    git-dch --release
  else
    git-dch --release --new-version="${version}+${append}1"
  fi
  version=$(dpkg-parsechangelog | awk '/^Version: / {print $2}')
  git add debian/changelog && git commit -m "debian/changelog: $version"
}

# Build
build() {
  check_dir
  NCPU=$(grep -c "^processor" /proc/cpuinfo)
  # only build in one ARCH for source which only has `Architecture: all' packages
  if [ x"$(cat debian/control |grep '^Architecture:' | grep -v all)" == x ]; then
    err "Architecture: all, build only once per DIST."
    ARCHS=$(echo ${ARCHS} | awk '{print $1}')
  fi
  # include orig source for the first build
  source_type="-sa"
  for DIST in ${DISTS}; do
    # full build for the first ARCH in every DISTS, rest is binary-only build
    build_type="-F"
    for ARCH in ${ARCHS}; do
      tmux_run "DEB_BUILD_OPTIONS='nocheck parallel=$((NCPU/2))' \
        COWBUILDER_BASE=${COWBUILDER_BASE} time -p git-buildpackage \
        --git-export-dir='../build_${DIST}_${ARCH}' \
        --git-dist=${DIST} --git-arch=${ARCH} \
        -nc ${source_type} ${build_type} $*"
      source_type="-sd"
      build_type="-B"
    done
  done
}

build_all() {
  for dir in "$@"
  do
    if [ -d "$dir" ]; then
      pushd "$dir"
      build
      popd
    fi
  done
}

reprepro_include() {
  check_dir
  local source
  source=$(dpkg-parsechangelog | awk '/^Source: / {print $2}')
  local version
  version=$(dpkg-parsechangelog | awk '/^Version: / {print $2}')
  for DIST in ${DISTS}; do
    for ARCH in ${ARCHS}; do
      reprepro -b "$1" include ${DIST} \
        "../build_${DIST}_${ARCH}/${source}_${version}${DIST}_${ARCH}.changes"
    done
  done
}

staging() {
  check_dir
  source=$(dpkg-parsechangelog | awk '/^Source: / {print $2}')
  repo removesrc -s $source
  repo include_all -s
}

include() {
  DATE=$(date +%Y-%m%d-%H%M%S)
  repo gensnapshot prev
  repo include_all
  repo gensnapshot $DATE
}

tag() {
  check_dir
  git-buildpackage --git-tag-only "$@"
  local branch num_patches num_gitlog version
  branch=$(git rev-parse --abbrev-ref HEAD)
  if git branch | grep -q "patch-queue/${branch}"; then
    num_patches=$(cat debian/patches/series | wc -l)
    num_gitlog=$(git log --oneline ${branch}..patch-queue/${branch} | wc -l)
    if [ $num_patches -eq $num_gitlog ]; then
      version=$(dpkg-parsechangelog | awk '/^Version: / {print $2}')
      git tag "patch-queue/${version}" "patch-queue/${branch}"
    fi
  fi
}

push() {
  # TODO use gbp-pq push, auto detect if push needed
  git push
  git push --tags
}

finish() {
  include
  tag
  push
}

clean() {
  check_dir
  if [ $(git status --porcelain | wc -l) -eq 0 ]; then
    return
  fi
  if [ x"$1" == x"ask" ]; then
    git status --porcelain
    read -p "Clear git working tree?(Ctrl-C to cancel)"
  fi
  git reset --hard HEAD && git clean -df
}

clean_built() {
  check_dir
  for DIST in ${DISTS}; do
    for ARCH in ${ARCHS}; do
      rm -vfr "../build_${DIST}_${ARCH}/"
    done
  done
}

repo() {
  local action="$1"
  shift
  local base
  if [ x"$1" = x"-s" ]; then
    shift
    base="${REPREPRO_STAGING_DIR}"
  else
    base="${REPREPRO_BASE_DIR}"
  fi
  if [ x"$action" = x"include_all" ]; then
    check_dir
    local source
    source=$(dpkg-parsechangelog | awk '/^Source: / {print $2}')
    local version
    version=$(dpkg-parsechangelog | awk '/^Version: / {print $2}')
  fi
  for DIST in ${DISTS}; do
    if [ x"$action" = x"include_all" ]; then
      for ARCH in ${ARCHS}; do
        reprepro -b "$base" include ${DIST} \
          "../build_${DIST}_${ARCH}/${source}_${version}${DIST}_${ARCH}.changes"
      done
    else
      reprepro -b "$base" "$action" ${DIST} "$@"
    fi
  done
}

log() {
  check_dir
  local source
  source=$(dpkg-parsechangelog | awk '/^Source: / {print $2}')
  local version
  version=$(dpkg-parsechangelog | awk '/^Version: / {print $2}')
  for DIST in ${DISTS}; do
    for ARCH in ${ARCHS}; do
      tmux_run "less ../build_${DIST}_${ARCH}/${source}_${version}_*.build"
    done
  done
}

watch() {
  # source_pkg_name local_dist debian_dist ignored_versions
  if [ x"$1" = x"" ]; then
    usage
  else
    watch_list=$1
  fi
  cat $watch_list | grep -v '^#' | while read debian_source local_dist debian_dist ignored_versions
  do
    local_version=`reprepro -b ${REPREPRO_BASE_DIR} --list-format '${version}' listfilter $local_dist '$Source (== '$debian_source'), $Architecture (==source)'`
    if [ x"$debian_dist" = x"" -o x"$debian_dist" = x"-" ]; then
      debian_dist=$local_dist
    fi
    debian_version=`curl -s http://packages.debian.org/source/${debian_dist}/${debian_source} | grep "Source Package: ${debian_source}" | awk -F'(\(|\))' '{print $2}'`
    if [ x"$debian_version" != x"" ]; then
      ignore=false
      for i in ignored_versions; do
        if [ x"$debian_version" = x"$ignored_versions" ]; then
            ignore=true
            break
        fi
      done
      if [ x"$ignore" = x"true" ]; then
          continue
      fi
      if dpkg --compare-versions "$debian_version" gt "$local_version" || [ x"$DEBUG" != x"" ]; then
        echo "${debian_source}: debian(${debian_dist} ${debian_version}) local(${local_dist} ${local_version})"
      fi
    else
      echo "${debian_source}: can't get upstream version"
    fi
  done
}

build_once() {
  DISTS=$(echo ${DISTS} | awk '{print $1}')
  ARCHS=$(echo ${ARCHS} | awk '{print $1}')
  err "Only build for $DISTS $ARCHS"
}

# execute [--inputfile <input_file>] <cmd> [<options>]
execute() {
  local input
  while [ -n "$1" ]; do
    case "$1" in
      --inputfile)
        input="$input --inputfile $2"
        shift 2
        ;;
      *)
        break
        ;;
    esac
  done
  local cmd=$1
  shift
  local pwd
  pwd="$(pwd)"
  local mount_dir="$pwd"
  for DIST in ${DISTS}; do
    for ARCH in ${ARCHS}; do
      tmux_run "sudo BIND_DIR=$pwd cowbuilder --dist ${DIST} --architecture ${ARCH} \
        --execute --configfile ~/.pbuilderrc \
        --basepath ${COWBUILDER_BASE}/base-${DIST}-${ARCH}.cow \
        --bindmount ${mount_dir} $input \
        -- ${REPO_BASE}/scripts/${cmd} $*"
    done
  done
}

sandbox() {
  execute sandbox
}

jpkg() {
  build_once
  jdk=$1
  if echo ${jdk} | grep -qs 'x64'; then
    ARCHS=amd64
  elif echo ${jdk} | grep -qs 'i[3456]86'; then
    ARCHS=i386
  fi
  jdk_real="$(readlink -f "$jdk")"
  build_dir="$(dirname "$jdk_real")/build"
  mkdir -p "$build_dir"
  cd "$build_dir"
  execute --inputfile "$jdk_real" jpkg "$@"
}

# kpkg [-s] <linux-source.deb> [<version-append>] [<revision-append>]
kpkg() {
  build_once
  if [ x"$1" = x"-s" ]; then
    run_shell="-s"
    shift
  fi
  deb=$1
  version_append=$2
  if [ ! -f "$deb" ]; then
    read -p "${deb} does not exist, try to download?(Ctrl-C to cancle)"
    wget -O "$deb" http://ftp.us.debian.org/debian/pool/main/l/linux/$(basename $deb)
  fi
  deb_real="$(readlink -f "$deb")"
  build_dir="$(dirname "$deb_real")/build"
  mkdir -p "$build_dir"
  cd "$build_dir"
  input_param="--inputfile ${REPO_BASE}/scripts/kpkg_header_clean_hook \
    --inputfile ${REPO_BASE}/scripts/kpkg_image_clean_hook --inputfile $deb_real"
  extra_script="${REPO_BASE}/scripts/kpkg-${version_append}"
  if [ -f "$extra_script" ]; then
    input_param="$input_param --inputfile $extra_script"
  fi
  if [ -f config ]; then
    input_param="$input_param --inputfile config"
  fi
  execute $input_param kpkg $run_shell $ARCHS "$@"
}

action="$1"
case "$action" in
  c)  action=create ;;
  u)  action=update ;;
  l)  action=login ;;
  d)  action=download ;;
  np) action=new_patch ;;
  ap) action=amend_patch ;;
  nc) action=new_change ;;
  b)  action=build ;;
  ba) action=build_all ;;
  s)  action=staging ;;
  i)  action=include ;;
  t)  action=tag ;;
  p)  action=push ;;
  f)  action=finish ;;
  cl) action=clean ;;
  cb) action=clean_built ;;
  w)  action=watch ;;
  k)  action=kill_pane ;;
  r)  action=repo ;;
esac
case "$action" in
  update|create|login)
    shift
    ucl $action "$@"
    ;;
  list|includedeb|remove|removesrc)
    shift
    repo $action "$@"
    ;;
  *)
    if [ x$(type -t $action) == x"function" ]; then
      shift
      $action "$@"
    else
      usage
    fi
    ;;
esac

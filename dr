#!/bin/bash
#
# Script ease building Debian packages

set -e

# Helper functions
err() {
  echo "$@" >&2
}
load_var() {
  local file=~/.pbuilderrc
  if [ -f "$file" ]; then
    eval $(grep "^$1" $file)
  fi
}
# init build host env
init() {
  REPO_BASE="$(dirname $(readlink -f "$0"))"
  cd "${REPO_BASE}"
  mkdir -p pbuilder
  sed -i -e "s#^REPO_BASE=.*#REPO_BASE=\"${REPO_BASE}\"#" pbuilderrc
  # let git ignore REPO_BASE line in pbuilderrc
  git config filter.stripvar.clean "perl -lpe 's/^(REPO_BASE)=(.*)/\$1=\"CHANGEME\"/'"
  mkdir -p ~/bin/
  : ln -s ${REPO_BASE}/dr ~/bin/
  : ln -s ${REPO_BASE}/gbp.conf ~/.gbp.conf
  : ln -s ${REPO_BASE}/pbuilderrc ~/.pbuilderrc
  sudo apt-get install git-buildpackage cowbuilder reprepro bsd-mailx sudo \
    fakeroot tmux
}
usage() {
  cat <<EOF
USAGE: $(basename $0) [-hswjSai] subcommand [options ...]

OPTIONS:
  -h | help
  -l | lenny
  -s | squeeze
  -w | wheezy
  -j | jessie
  -S | sid
  -a | amd64
  -i | i386

SUBCOMMANDS:
  c|create                     | create build chroot env at ${COWBUILDER_BASE}
  u|update                     | update build chroot env
  l|login [--save-after-login] | login into build chroot env
  d|download                   | download and import debian source package
  np|new_patch                 | run after git commit at patch-queue/* branch
  nc|new_change                | create new changelog stanza
  b|build [<debuild-options>]  | run inside debian source dir
  ba|build_all [src_dir ...]   | build for every src_dir
  k|kill_pane                  | kill other tmux panes
  s|staging                    | include built deb in main repo(${REPREPRO_STAGING_DIR})
  i|include                    | include built deb in staging repo(${REPREPRO_BASE_DIR})
  t|tag                        | create git tag for current package version
  it|include_tag               | include and tag
  p|push                       | push to git remote
  w|watch list_file            | watch for upstream version
  r|repo <action> [-s]         | reprepro wrapper, -s for staging repo
  jpkg <jdk.bin>               | use make-jpkg to build jdk.deb inside chroot env

default dists: ${DEFAULT_DISTS}
default archs: ${DEFAULT_ARCHS}
EOF
  exit 1
}

# Global settings
# git-pbuilder
load_var REPO_BASE
if [ x"${REPO_BASE}" = x"CHANGEME" ]; then
  err "REPO_BASE in pbuilderrc not changed, running init."
  init
  exit $?
fi
load_var COWBUILDER_BASE
# reprepro
REPREPRO_BASE_DIR="${REPO_BASE}/repo"
REPREPRO_STAGING_DIR="${REPO_BASE}/repo-staging"
# other
load_var DEFAULT_DISTS
load_var DEFAULT_ARCHS

# Options
DISTS=""
ARCHS=""
OPTIND=1
while getopts "hlaiswS" opt; do
  case "$opt" in
    l) DISTS="$DISTS lenny" ;;
    s) DISTS="$DISTS squeeze" ;;
    w) DISTS="$DISTS wheezy" ;;
    j) DISTS="$DISTS jessie" ;;
    S) DISTS="$DISTS sid" ;;
    a) ARCHS="$ARCHS amd64" ;;
    i) ARCHS="$ARCHS i386" ;;
    h) usage ;;
    *) usage ;;
  esac
done
shift $((OPTIND-1))

# Set default if empty
DISTS=${DISTS:-$DEFAULT_DISTS}
ARCHS=${ARCHS:-$DEFAULT_ARCHS}

# Sort DISTS and ARCHS, workaround for reprepro missing *.orig.tar.gz when
# processincoming
DISTS=$(echo $DISTS | tr " " "\n" | sort | tr "\n" " ")
ARCHS=$(echo $ARCHS | tr " " "\n" | sort | tr "\n" " ")

# Run command in tmux panes, and pause after finish
tmux_run() {
  if [ x"$TMUX" = x ]; then
    err "Please run inside tmux session."
    exit 1
  fi
  tmux split-window -d "$@; read -p '#### finished ####' tmp"
  tmux select-layout even-vertical >& /dev/null
}

# Kill other tmux panes
kill_pane() {
  tmux kill-pane -a
}

# Exit if not inside debian source dir
check_dir() {
  if [ ! -f "debian/changelog" ]; then
    err "Please run inside debian source dir."
    exit 1
  fi
}

# Update/create/login
ucl() {
  action="$1"
  shift
  if [ -f "$HOME/.pbuilderrc" ]; then
    GIT_PBUILDER_OPTIONS="--configfile $HOME/.pbuilderrc"
  fi
  for DIST in ${DISTS}; do
    load_var OTHERMIRROR
    for ARCH in ${ARCHS}; do
      # cowbuilder will not install extrapackages when creating .cow,
      # run `update' after `create' to get extrapackages installed
      if [ x"$action" == x"create" ]; then
        tmux_run "DIST=${DIST} ARCH=${ARCH} COWBUILDER_BASE=${COWBUILDER_BASE} \
          GIT_PBUILDER_OPTIONS='${GIT_PBUILDER_OPTIONS}' \
          git-pbuilder create --othermirror '$OTHERMIRROR' $*; \
          DIST=${DIST} ARCH=${ARCH} COWBUILDER_BASE=${COWBUILDER_BASE} \
          GIT_PBUILDER_OPTIONS='${GIT_PBUILDER_OPTIONS}' \
          git-pbuilder update"
      else
        tmux_run "DIST=${DIST} ARCH=${ARCH} COWBUILDER_BASE=${COWBUILDER_BASE} \
          GIT_PBUILDER_OPTIONS='${GIT_PBUILDER_OPTIONS}' \
          git-pbuilder ${action} --othermirror '$OTHERMIRROR' $*"
      fi
    done
  done
}

download() {
  git-import-dsc --download "$@"
}

# New changelog
new_change() {
  check_dir
  branch=$(git rev-parse --abbrev-ref HEAD)
  # set default string appended to $version
  if [ x"$branch" = x"master" ]; then
    branch="build"
  fi
  version=$(dpkg-parsechangelog | awk '/^Version: / {print $2}')
  if echo ${version} | grep -q "${branch}[0-9]*$"; then
    git-dch --release
  else
    git-dch --release --new-version="${version}+${branch}1"
  fi
  version=$(dpkg-parsechangelog | awk '/^Version: / {print $2}')
  git add debian/changelog && git commit -m "debian/changelog: $version"
}

# New patch
new_patch() {
  gbp-pq export
  git checkout -- debian/patches/
  num_patches=$(cat debian/patches/series | wc -l)
  pushd debian/patches >& /dev/null
  for i in *.patch; do
    if [[ ${i:0:4} =~ ^[0-9]+$ ]] && [ ${i:0:4} -gt $num_patches ]; then
      git add $i
      echo $i >> series
      git add series
      tmp=${i:5}
      msg=${tmp/%.patch/}
      git commit -m "debian/patches/: $msg"
    fi
  done
  popd >& /dev/null
  git clean -f
}

clean() {
  check_dir
  if [ $(git status --porcelain | wc -l) -eq 0 ]; then 
    return
  fi
  if [ x"$1" == x"ask" ]; then
    git status --porcelain
    read -p "Clear git working tree?(Ctrl-C to cancel)" tmp
  fi
  git reset --hard HEAD && git clean -df
}

# Build
build() {
  check_dir
  NCPU=$(grep "^processor" /proc/cpuinfo | wc -l)
  # only build in one ARCH for source which only has `Architecture: all' packages
  if [ x"$(cat debian/control |grep '^Architecture:' | grep -v all)" == x ]; then
    err "Architecture: all, build only once per DIST."
    ARCHS=$(echo ${ARCHS} | awk '{print $1}')
  fi
  # include orig source for the first build
  source_type="-sa"
  for DIST in ${DISTS}; do
    # full build for the first ARCH in every DISTS, rest is binary-only build
    build_type="-F"
    for ARCH in ${ARCHS}; do
      tmux_run "DEB_BUILD_OPTIONS='nocheck parallel=$((NCPU/2))' \
        COWBUILDER_BASE=${COWBUILDER_BASE} time -p git-buildpackage \
        --git-export-dir='../build_${DIST}_${ARCH}' \
        --git-dist=${DIST} --git-arch=${ARCH} \
        -nc ${source_type} ${build_type} $*"
      source_type="-sd"
      build_type="-B"
    done
  done
}

build_all() {
  for dir in "$@"
  do
    if [ -d "$dir" ]; then
      pushd "$dir"
      build
      popd
    fi
  done
}

reprepro_include() {
  check_dir
  local source
  source=$(dpkg-parsechangelog | awk '/^Source: / {print $2}')
  local version
  version=$(dpkg-parsechangelog | awk '/^Version: / {print $2}')
  for DIST in ${DISTS}; do
    for ARCH in ${ARCHS}; do
      reprepro -b "$1" include ${DIST} \
        "../build_${DIST}_${ARCH}/${source}_${version}${DIST}_${ARCH}.changes"
    done
  done
}

staging() {
  repo include_all -s
}

include() {
  DATE=$(date +%Y-%m%d-%H%M%S)
  repo gensnapshot prev
  repo include_all
  repo gensnapshot $DATE
}

tag() {
  git-buildpackage --git-ignore-new --git-tag-only
}

include_tag() {
  include
  tag
}

push() {
  git push
  git push --tags
}

repo() {
  local action="$1"
  shift
  local base
  if [ x"$1" = x"-s" ]; then
    shift
    base="${REPREPRO_STAGING_DIR}"
  else
    base="${REPREPRO_BASE_DIR}"
  fi
  if [ x"$action" = x"include_all" ]; then
    check_dir
    local source
    source=$(dpkg-parsechangelog | awk '/^Source: / {print $2}')
    local version
    version=$(dpkg-parsechangelog | awk '/^Version: / {print $2}')
  fi
  for DIST in ${DISTS}; do
    if [ x"$action" = x"include_all" ]; then
      for ARCH in ${ARCHS}; do
        reprepro -b "$base" include ${DIST} \
          "../build_${DIST}_${ARCH}/${source}_${version}${DIST}_${ARCH}.changes"
      done
    else
      reprepro -b "$base" "$action" ${DIST} "$@"
    fi
  done
}

log() {
  check_dir
  local source
  source=$(dpkg-parsechangelog | awk '/^Source: / {print $2}')
  local version
  version=$(dpkg-parsechangelog | awk '/^Version: / {print $2}')
  for DIST in ${DISTS}; do
    for ARCH in ${ARCHS}; do
      tmux_run "less ../build_${DIST}_${ARCH}/${source}_${version}_*.build"
    done
  done
}

watch() {
  # source_pkg_name local_dist debian_dist
  if [ x"$1" = x"" ]; then
    usage
  else
    watch_list=$1
  fi
  cat $watch_list | grep -v '^#' | while read debian_source local_dist debian_dist
  do
    local_version=`reprepro -b ${REPREPRO_BASE_DIR} --list-format '${version}' listfilter $local_dist '$Source (== '$debian_source'), $Architecture (==source)'`
    if [ x"$debian_dist" = x"" ]; then
      debian_dist=$local_dist
    fi
    debian_version=`curl -s http://packages.debian.org/source/${debian_dist}/${debian_source} | grep "Source Package: ${debian_source}" | awk -F'(\(|\))' '{print $2}'`
    if [ x"$debian_version" != x"" ]; then
      if dpkg --compare-versions "$debian_version" gt "$local_version" || [ x"$DEBUG" != x"" ]; then
        echo "${debian_source}: debian(${debian_dist} ${debian_version}) local(${local_dist} ${local_version})"
      fi
    else
      echo "${debian_source}: can't get upstream version"
    fi
  done
}

jpkg() {
  jdk=$1
  DIST=wheezy
  ARCH=amd64
  if [ $(echo ${DISTS} | wc -w) -eq 1 ]; then
    DIST=$(echo ${DISTS} | tr -d ' ')
  fi
  if echo ${jdk} | grep -Eqs 'x64\.bin$'; then
    ARCH=amd64
  elif echo ${jdk} | grep -Eqs 'i[3456]86\.bin$'; then
    ARCH=i386
  elif [ $(echo ${ARCHS} | wc -w) -eq 1 ]; then
    ARCH=$(echo ${ARCHS} | tr -d ' ')
  fi
  build_dir="$(readlink -f $(dirname "${jdk}"))/build"
  mkdir -p "${build_dir}"
  sudo cowbuilder --execute --dist ${DIST} --architecture ${ARCH} \
    --configfile ~/.pbuilderrc \
    --basepath ${COWBUILDER_BASE}/base-${DIST}-${ARCH}.cow \
    --inputfile "${jdk}" --bindmount "${build_dir}" \
    -- ${REPO_BASE}/scripts/jpkg "${jdk}" "${build_dir}"
}

action="$1"
case "$action" in
  c)  action=create ;;
  u)  action=update ;;
  l)  action=login ;;
  d)  action=download ;;
  np) action=new_patch ;;
  nc) action=new_change ;;
  b)  action=build ;;
  ba) action=build_all ;;
  s)  action=staging ;;
  i)  action=include ;;
  t)  action=tag ;;
  it) action=include_tag ;;
  p)  action=push ;;
  w)  action=watch ;;
  k)  action=kill_pane ;;
  r)  action=repo ;;
esac
case "$action" in
  update|create|login)
    shift
    ucl $action "$@"
    ;;
  list|includedeb|remove|removesrc)
    shift
    repo $action "$@"
    ;;
  *)
    if [ x$(type -t $action) == x"function" ]; then
      shift
      $action "$@"
    else
      usage
    fi
    ;;
esac
